# -*- coding: utf-8 -*-
"""Prediction of political party by voting record.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QcULsH28WFfbTR22XgKp6TTNqC9avfRB
"""

url = "https://raw.githubusercontent.com/Colin-Pace/Keras-neural-networks/master/house-votes-84.data.txt"

import pandas as pd

feature_names =  ['party','handicapped-infants', 'water-project-cost-sharing', 
                    'adoption-of-the-budget-resolution', 'physician-fee-freeze',
                    'el-salvador-aid', 'religious-groups-in-schools',
                    'anti-satellite-test-ban', 'aid-to-nicaraguan-contras',
                    'mx-missle', 'immigration', 'synfuels-corporation-cutback',
                    'education-spending', 'superfund-right-to-sue', 'crime',
                    'duty-free-exports', 'export-administration-act-south-africa']

voting_data = pd.read_csv(url, na_values=['?'], names = feature_names)

voting_data.head()

voting_data.describe()

voting_data.dropna(inplace=True)
voting_data.describe()

voting_data.replace(('y', 'n'), (1, 0), inplace=True)
voting_data.replace(('democrat', 'republican'), (1, 0), inplace=True)

voting_data.head()

all_features = voting_data[feature_names].values
all_classes = voting_data['party'].values

from tensorflow.python.keras.layers import Dense, Dropout
from tensorflow.python.keras import Sequential
from sklearn.model_selection import cross_val_score

def create_model():
  model = Sequential()
  model.add(Dense(32, input_dim=17, kernel_initializer='normal', activation='relu'))
  model.add(Dense(16, kernel_initializer='normal', activation='relu'))
  model.add(Dense(1, kernel_initializer='normal', activation='sigmoid'))
  model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['acc'])
  return model

from tensorflow.keras.wrappers.scikit_learn import KerasClassifier
estimator = KerasClassifier(build_fn=create_model, nb_epoch=100, verbose=0)
cv_scores = cross_val_score(estimator, all_features, all_classes, cv=10)
cv_scores.mean()

